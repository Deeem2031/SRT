@page "/"
@using System.Timers
@using Majorsoft.Blazor.Components.Common.JsInterop.ElementInfo
@using GameLogic

<svg width="1000" height="1000" style="background-color:#0094ff" @ref="MapReference" @onmousemove="MouseMove" @onmouseup="MouseUp">
    @foreach (var tile in _map.Tiles)
    {
        <g transform="translate(@tile.X(TileSize), @tile.Y(TileSize))" @onmousedown:preventDefault @onmousedown="@(e => MapMouseDown(e, tile))"
             style="@(() => tile.Style())"
        >
            <polygon fill="@tile.PrimaryColor" stroke="@tile.SecondaryColor" stroke-width="2px" 
                points="@((int)TileSize),0 @((int)(TileSize*0.5)),@((int)(TileSize*-0.87)) @((int)(TileSize*-0.50)),@((int)(TileSize*-0.87)) @((int)-TileSize),0 @((int)(TileSize*-0.50)),@((int)(TileSize*0.87)) @((int)(TileSize*0.50)),@((int)(TileSize*0.87))"
            ></polygon>
            @*<text fill="#AAAAAA" font-size="10" x="-50" y="-70">(@tile.Q, @tile.R) (@tile.X, @tile.Y)</text>*@
            @if (tile.Unit != null)
            {
                @((MarkupString)tile.Unit.Content(TileSize))
            }
            @if(tile.Unit is IHasGold hasGold)
            {
                <g><text fill="#FFD700" stroke="#000000" stroke-width="1px" font-size="20" text-anchor="middle" y="60">@((int)(hasGold.Gold)) 💰</text></g>
            }
        </g>
    }
    @if (dragElement != null)
    {
        <g transform="translate(@mousePosition.X, @mousePosition.Y)" style="cursor:none">
            @((MarkupString)dragElement.Content(TileSize))
        </g>
    }
</svg>

@code {
    const double TileSize = 75;

    private static Map _map = new Map();

    private Timer _gameUpdateTimer = new Timer();

    private Point mousePosition;

    ElementReference MapReference;

    private static IUnit? dragElement;

    protected override Task OnInitializedAsync()
    {
        _map.GenerateRandom(TileSize, 0, 1000, 0, 1000);
        _gameUpdateTimer.AutoReset = true;
        _gameUpdateTimer.Interval = 1000 / Settings.TicksPerSecond;
        _gameUpdateTimer.Elapsed += GameTick;
        _gameUpdateTimer.Enabled = true;
        return base.OnInitializedAsync();
    }

    private void GameTick(object? sender, ElapsedEventArgs e)
    {
        foreach (var tile in _map.Tiles)
        {
            tile.Unit?.OnTick();
        }
        InvokeAsync(() => this.StateHasChanged());
    }

    private void MapMouseDown(MouseEventArgs e, Tile mapEntry)
    {
        if (mapEntry.Unit is ICanMove canMove && canMove.CanMove())
        {
            dragElement = mapEntry.Unit;
        }
        if (mapEntry.Unit is ICanSpawn canSpawn && canSpawn.CanSpawn())
        {
            dragElement = canSpawn.SpawnUnit();
        }
        if (dragElement == null)
        {
            return;
        }
        UpdateDarkArea();
    }

    public static void UpdateDarkArea()
    {
        foreach(var tile in _map.Tiles)
        {
            tile.IsDarkend = (dragElement is ICanMove canMove) && !canMove.CanMoveThere(tile);
        }
    }

    private async Task MouseMove(MouseEventArgs e)
    {
        DomRect? rect = null;
        await InvokeAsync(async () => rect = await MapReference.GetClientRectAsync());

        mousePosition.X = (int)(e.ClientX - rect.Left);
        mousePosition.Y = (int)(e.ClientY - rect.Top);

        foreach (var tile in _map.Tiles)
        {
            tile.IsHighlighted = false;
        }
        var mouseOvertile = TileFromPosition(mousePosition.X, mousePosition.Y);
        if (mouseOvertile != null)
        {
            mouseOvertile.IsHighlighted = true;
        }
    }

    private (double X, double Y, double Z) AxialToCube(AxialCoords axialCoords)
    {
        return (axialCoords.Q, axialCoords.R, -axialCoords.Q - axialCoords.R);
    }

    private AxialCoords CubeToAxial((double X, double Y, double Z) cubeCoords)
    {
        return (cubeCoords.X, cubeCoords.Y);
    }

    private (double X, double Y, double Z) CubeRound((double X, double Y, double Z) cubeCoords)
    {
        var rx = Math.Round(cubeCoords.X);
        var ry = Math.Round(cubeCoords.Y);
        var rz = Math.Round(cubeCoords.Z);

        var x_diff = Math.Abs(rx - cubeCoords.X);
        var y_diff = Math.Abs(ry - cubeCoords.Y);
        var z_diff = Math.Abs(rz - cubeCoords.Z);

        if (x_diff > y_diff && x_diff > z_diff)
        {
            rx = -ry - rz;
        }
        else if (y_diff > z_diff)
        {
            ry = -rx - rz;
        }
        else
        {
            rz = -rx - ry;
        }

        return (rx, ry, rz);
    }

    private (int Q, int R) PixelToHex(int x, int y)
    {
        var qfrac = (double)x * 2.0 / 3.0 / TileSize;
        var rfrac = ((double)x / -3.0 + Math.Sqrt(3.0) / 3.0 * (double)y) / TileSize;
        return CubeToAxial(CubeRound(AxialToCube((qfrac, rfrac)))).ToPoint();
    }

    private Tile? TileFromPosition(int x, int y)
    {
        var hexCoords = PixelToHex(x, y);
        foreach (var tile in _map.Tiles)
        {
            if (tile.Q == hexCoords.Q && tile.R == hexCoords.R)
            {
                return tile;
            }
        }
        return null;
    }

    private void MouseUp(MouseEventArgs e)
    {
        if (dragElement == null)
        {
            return;
        }
        foreach(var t in _map.Tiles) 
        { 
            t.IsDarkend = false; 
        }

        var tile = TileFromPosition(mousePosition.X, mousePosition.Y);
        if (tile != null && dragElement is ICanMove canMove && canMove.CanMoveThere(tile))
        {
            canMove.MoveTo(tile);
        }
        else
        {
            (dragElement as ISpawnable)?.AbortSpawn();
        }
        dragElement = null;
    }
}
